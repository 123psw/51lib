C51 COMPILER V9.57.0.0   USER                                                              10/09/2020 17:22:15 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE USER
OBJECT MODULE PLACED IN .\Objects\user.obj
COMPILER INVOKED BY: D:\KeilC51\C51\BIN\C51.EXE ..\User\user.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BSP\inc;..\User) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\user.lst) TABS(2) OBJECT(.\Objects\user.obj)

line level    source

   1          #include "user.h"
   2          
   3          void init_IO()
   4          {
   5   1        P2 = P2&0x1f|0xa0; //??Y5
   6   1        P0 = 0x00; 
   7   1        P2 &= 0x1f; //????
   8   1      
   9   1        P2 = P2&0x1f|0x80; //??Y4
  10   1        P0 = 0xff;
  11   1        P2 &= 0x1f; //????
  12   1      }
  13          
  14          
  15          void BCD_conversion(u8 *time,u8 *dbuf)
  16          {
  17   1         time[0] &= 0x7f; //?
  18   1         time[1] &= 0x7f; //?
  19   1         time[2] &= 0x3f; //?
  20   1         
  21   1         dbuf[0] = time[2]/10;
  22   1         dbuf[1] = time[2]%10;
  23   1         dbuf[2] = 11;
  24   1         dbuf[3] = time[1]/10;
  25   1         dbuf[4] = time[1]%10;
  26   1         dbuf[5] = 11;
  27   1         dbuf[6] = time[0]/10;
  28   1         dbuf[7] = time[0]%10;
  29   1      }
  30          
  31          void ExecTemperature(u8 KeyNum ,TemperatureRecordStatus *tr , KeyCount *keyout)
  32          {
  33   1        switch(*tr)
  34   1        {
  35   2          case ParameterSettings:
  36   2           if(KeyNum == 4)   //S4
  37   2           {
  38   3             *tr = ParameterSettings;
  39   3           } 
  40   2           if(KeyNum == 3)  //S5
  41   2           {
  42   3             *tr = ConfirmTheAcquisition; 
  43   3              keyout->S5 = 0;      
  44   3           }  
  45   2          break;     
  46   2          case TemperatureDisplay:
  47   2           if(KeyNum == 2)  //S6
  48   2           {
  49   3             LedOff();
  50   3             *tr = TemperatureDisplay;
  51   3           } 
  52   2           if(KeyNum == 1)  
  53   2           {
  54   3             *tr = ParameterSettings;
C51 COMPILER V9.57.0.0   USER                                                              10/09/2020 17:22:15 PAGE 2   

  55   3           }          
  56   2          break; 
  57   2        }
  58   1      }
  59          
  60          void display(u8 KeyNum, KeyCount *keycount)
  61          {
  62   1        switch(KeyNum)
  63   1        {
  64   2          case 4:
  65   2             (keycount->S4)++;
  66   2             if((keycount->S4)>=4)
  67   2               (keycount->S4)=0;
  68   2          break;
  69   2           
  70   2          case 2:
  71   2             (keycount->S6)++;
  72   2             if((keycount->S6)>=10)
  73   2               (keycount->S6)=0;
  74   2          break;
  75   2        }
  76   1      }
  77          
  78          void LedOff()
  79          {
  80   1        P2 = P2&0x1f|0x80; //??Y4
  81   1        P0 = 0xFF;
  82   1        P2 &= 0x1f; //????
  83   1      }
  84          
  85          void LedFlash(u8 flash)
  86          {
  87   1       switch(flash)
  88   1       {
  89   2         case 0: P2 = P2&0x1f|0x80; P0 = 0xFE; P2 &= 0x1f; break;
  90   2         case 1: P2 = P2&0x1f|0x80; P0 = 0xFF; P2 &= 0x1f; break;
  91   2       }
  92   1      }
  93          
  94          void ParameterSettingInterface(u8 S4)
  95          {
  96   1        static u8 a[]={10,10,10,10,10,11,0,1};
  97   1        switch(S4)
  98   1        {
  99   2          case 0: a[6]=0; a[7]=1; segdisp(a); break;
 100   2          case 1: a[6]=0; a[7]=5; segdisp(a); break;
 101   2          case 2: a[6]=3; a[7]=0; segdisp(a); break;
 102   2          case 3: a[6]=6; a[7]=0; segdisp(a); break;
 103   2        }    
 104   1      }
 105          
 106          void TemperatureAcquisitionDisplayInterface(u8 S6 , u8 *a ,u8 *wendu)
 107          {
 108   1        a[0] = 0;
 109   1        a[2] = 11;
 110   1        a[3] = 10;
 111   1        a[4] = 10;
 112   1        a[5] = 11;
 113   1        switch(S6)
 114   1        {
 115   2          case 0: a[1]=0; a[6] = wendu[0]/10; a[7] = wendu[0] %10; segdisp(a); break;
 116   2          case 1: a[1]=1; a[6] = wendu[1]/10; a[7] = wendu[1] %10; segdisp(a); break;
C51 COMPILER V9.57.0.0   USER                                                              10/09/2020 17:22:15 PAGE 3   

 117   2          case 2: a[1]=2; a[6] = wendu[2]/10; a[7] = wendu[2] %10; segdisp(a); break;
 118   2          case 3: a[1]=3; a[6] = wendu[3]/10; a[7] = wendu[3] %10; segdisp(a); break;
 119   2          case 4: a[1]=4; a[6] = wendu[4]/10; a[7] = wendu[4] %10; segdisp(a); break;
 120   2          case 5: a[1]=5; a[6] = wendu[5]/10; a[7] = wendu[5] %10; segdisp(a); break;
 121   2          case 6: a[1]=6; a[6] = wendu[6]/10; a[7] = wendu[6] %10; segdisp(a); break;
 122   2          case 7: a[1]=7; a[6] = wendu[7]/10; a[7] = wendu[7] %10; segdisp(a); break;
 123   2          case 8: a[1]=8; a[6] = wendu[8]/10; a[7] = wendu[8] %10; segdisp(a); break;
 124   2          case 9: a[1]=9; a[6] = wendu[9]/10; a[7] = wendu[9] %10; segdisp(a); break; 
 125   2        }    
 126   1      } 
 127          
 128          void Copy(u8 *a , u8 c , unsigned long *m , unsigned long *n) //????
 129          {
 130   1        static u8 b[3];
 131   1        if(c == 0)
 132   1        {
 133   2         b[0] = a[0];
 134   2         b[1] = a[1];
 135   2         b[2] = a[2];
 136   2         *m = (unsigned long)b[2]*3600+(unsigned long)b[1]*60+(unsigned long)b[0];
 137   2        }
 138   1        
 139   1        *n = (unsigned long)a[2]*3600+(unsigned long)a[1]*60+(unsigned long)a[0];
 140   1      }
 141          void TimeShow(u8 *time ,u8 *dbuf , KeyCount keyout , u8 *wendu , TemperatureRecordStatus *tr)
 142          {
 143   1        static unsigned long m = 0;
 144   1        unsigned long n = 0;
 145   1        static u8 i = 0,j = 0,k = 0,l = 0;
 146   1        u16 min = 0;
 147   1        readtime(time);  
 148   1        BCD_conversion(time,dbuf);
 149   1        Copy(time,keyout.S5,&m,&n);
 150   1        switch(keyout.S4)
 151   1        {
 152   2          case 0: 
 153   2          {
 154   3            if(n - m == 1)
 155   3            {
 156   4              m = n;
 157   4              wendu[i++] = temget();
 158   4              if(i >= 10)
 159   4               {
 160   5                i=0;
 161   5                *tr = TemperatureDisplay;    
 162   5               }
 163   4            }
 164   3          }
 165   2          break;
 166   2          case 1:
 167   2          {
 168   3            if(n - m == 5)
 169   3            {
 170   4              m = n;
 171   4              wendu[j++] = temget();
 172   4              if(j >= 10)
 173   4               {
 174   5                j=0;
 175   5                *tr = TemperatureDisplay;    
 176   5               }
 177   4            }
 178   3          }
C51 COMPILER V9.57.0.0   USER                                                              10/09/2020 17:22:15 PAGE 4   

 179   2            break;
 180   2          case 2: 
 181   2          {
 182   3            if(n - m == 30)
 183   3            {
 184   4              m = n;
 185   4              wendu[k++] = temget();
 186   4              if(k >= 10)
 187   4               {
 188   5                k=0;
 189   5                *tr = TemperatureDisplay;    
 190   5               }
 191   4            }
 192   3          }
 193   2          break;
 194   2          case 4:
 195   2          {
 196   3            if(n - m == 60) 
 197   3            {
 198   4              m = n;
 199   4              wendu[l++] = temget();
 200   4              if(l >= 10)
 201   4               {
 202   5                l=0;
 203   5                *tr = TemperatureDisplay;    
 204   5               }
 205   4            }
 206   3          }     
 207   2          break;
 208   2        }
 209   1      }
 210            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1903    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      51
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
